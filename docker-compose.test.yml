# usage: docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit --renew-anon-volumes --exit-code-from postgrator
version: '3.7'
services:
  postgres:
    image: postgres:9.6-alpine
    environment:
      POSTGRES_USER: postgrator
      POSTGRES_DB: postgrator
    network_mode: "service:dummy"
  mariadb:
    image: mariadb:10.3
    environment:
      MYSQL_ROOT_PASSWORD: postgrator
      MYSQL_DATABASE: postgrator
      MYSQL_USER: postgrator
      MYSQL_PASSWORD: postgrator
    network_mode: "service:dummy"
  # NB: SQL Server needs 2.00 GB of RAM!
  sqlserver:
    image: microsoft/mssql-server-linux:latest
    environment:
      ACCEPT_EULA: Y 
      SA_PASSWORD: Postgrator123!
      MSSQL_PID: Express
    network_mode: "service:dummy"
  postgrator:
    build:
      context: .
    environment:
      NODE_ENV: testing
    depends_on:
      - postgres
      - mariadb
      - sqlserver
    network_mode: "service:dummy"

  # the dummy image is so that we can:
  #  a) use depends_on to make postgrator wait for everything
  #  b) use `network_mode: "service:dummy"` on the databases and tests
  # This allows the tests and databases to share a common, but virtual localhost.
  # This means that the tests do not require modification to support parameterised database servers.
  # This means that the containers do not need to be mounted onto the actual developer/CI 'localhost'
  # It doesn't -do- anything, it just provides a network stack. So we run some trivial, interruptible process which will exit(0)
  dummy:
    image: bash
    command: bash -c "yes >/dev/null"

